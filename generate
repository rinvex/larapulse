#!/usr/bin/env php
<?php
set_time_limit(0);


// How many previous reports
$count = 0;
$since = 'last Monday';
$years = range(2016, date('Y'));

foreach ($years as $year) {
    if (! file_exists($year)) {
        mkdir($year);
    }

    $count += iterator_count(new FilesystemIterator(__DIR__.'/'.$year, FilesystemIterator::SKIP_DOTS));
}


// Current report number
$number = $count + 1;


// Load credentials
require __DIR__ . '/vendor/autoload.php';
$dotenv = new Dotenv\Dotenv(__DIR__);
$dotenv->load();


// Tracked repos / branches
$repos = [
    'framework'               => ['master', '5.2', '5.1', '5.0'],
    'laravel'                 => ['master', 'develop', '5.1', '5.0'],
    'installer'               => ['master'],
    'docs'                    => ['master', '5.2', '5.1', '5.0'],
    'homestead'               => ['master', '2.0'],
    'lumen-framework'         => ['master', '5.2', '5.1', '5.0'],
    'lumen'                   => ['master', 'develop', '5.0'],
    'lumen-installer'         => ['master'],
    'lumen-docs'              => ['master', '5.2', '5.1', '5.0'],
    'laravel.com'             => ['master'],
    'quickstart-basic'        => ['master', '5.2'],
    'quickstart-intermediate' => ['master', '5.2'],
    'cashier-braintree'       => ['master', '1.0'],
    'cashier'                 => ['master', '6.0', '5.0', '4.0', '3.0', '2.0'],
    'settler'                 => ['master'],
    'socialite'               => ['master', '2.0'],
    'elixir'                  => ['master', '2.0'],
    'envoy'                   => ['master'],
    'valet'                   => ['master'],
    'echo'                    => ['master'],
];


// Tracked podcasts
$podcasts = [
    'https://simplecast.com/podcasts/351/rss',
    'https://simplecast.com/podcasts/1486/rss',
    'https://simplecast.com/podcasts/1356/rss',
];


// Excluded commits
$excluded = [
    'Merge remote-tracking branch',
    'Applied fixes from StyleCI',
    'Merge pull request',
    'Merge branch',
];


// Settings
$today          = date('Y-m-d');
$lastweek       = date('Y-m-d', strtotime($since));
$thisMonth      = date('F');
$maybeLastMonth = date('F', strtotime($since));
$published      = date('F d, Y');
$titleLimit     = 50;


// Report title date
if ($thisMonth == $maybeLastMonth) {
    $titleDate = date('d', strtotime($since)).'-'.date('d').' '.date('F').' '.date('Y');
} else {
    $titleDate = date('d', strtotime($since)).' '.date('F', strtotime($since)).'-'.date('d').' '.date('F').' '.date('Y');
}


//
$text      = '';
$briefText = 'Updates: ';

foreach ($repos as $repo => $branches) {

    $flag       = false;
    $branchText = '';
    $briefBranchText = '';

    foreach ($branches as $branch) {
        $url = "https://api.github.com/repos/laravel/{$repo}/commits?sha={$branch}&since={$lastweek}";

        // Create curl resource
        $ch = curl_init();

        // Set url
        curl_setopt($ch, CURLOPT_URL, $url);

        // Return the transfer as a string
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

        // Send authentication token header
        curl_setopt($ch, CURLOPT_HTTPHEADER, ["Authorization: token ".getenv('GIHUB_API_KEY')]);

        curl_setopt($ch, CURLOPT_USERAGENT, 'User-Agent: Awesome-Octocat-App');

        // $output contains the output string
        $output = curl_exec($ch);

        // Close curl resource to free up system resources
        curl_close($ch);

        $result  = [];
        $decoded = json_decode($output);

        if (empty($decoded)) {
            continue;
        }

        foreach ($decoded as $item) {
            if (strpos_arr($item->commit->message, $excluded) === false) {
                $result[] = [
                    'sha'        => substr($item->sha, 0, 7),
                    'url'        => $item->html_url,
                    'author'     => ! empty($item->author) ? $item->author->login : $item->commit->author->name,
                    'author_url' => ! empty($item->author) ? $item->author->html_url : '',
                    'title'      => substr(trim(str_replace(PHP_EOL, '', $item->commit->message)), 0, $titleLimit),
                ];
            }
        }

        $briefBranchText .= "{$branch}, ";
        $branchText .= "\n\n### [{$branch}](https://github.com/laravel/{$repo}/compare/{$branch}@{{$lastweek}}...{$branch}@{{$today}})\n";

        foreach ($result as $item) {
            $flag   = true;
            $author = ! empty($item['author_url']) ? "[@{$item['author']}]({$item['author_url']})" : "[{$item['author']}]";
            $branchText .= "- [{$item['sha']}]({$item['url']}): {$item['title']} {$author} \n";
        }
    }


    if ($flag) {
        if (! empty($text)) {
            $text .= "\n\n___\n\n";
        }

        $briefText .= "laravel/{$repo} [{$briefBranchText}], ";
        $text .= "## [laravel/{$repo}](https://github.com/laravel/{$repo})";
        $text .= $branchText;
    }
}


// strpos for arrays
function strpos_arr($haystack, $needle) {
    if(!is_array($needle)) {
        $needle = array($needle);
    }

    foreach($needle as $what) {
        if(($pos = strpos($haystack, $what))!==false) {
            return $pos;
        }
    }

    return false;
}

// Process podcats
$allPodcastsText      = '';
$allPodcastsbriefText = '';

foreach ($podcasts as $podcast) {
    $flag        = false;
    $podcastText = '';
    $simple      = file_get_contents($podcast);
    $xml         = new SimpleXMLElement($simple);

    foreach ($xml->channel->item as $item) {
        if (strtotime($item->pubDate) > strtotime($since)) {
            $flag = true;
            $podcastText .= "- [{$item->title}]({$item->link})\n";
        }
    }

    if ($flag) {
        $allPodcastsText .= "\n### [{$xml->channel->title}]({$xml->channel->link})\n{$podcastText}";
        $allPodcastsbriefText .= "{$xml->channel->title}, ";
    }
}

if (! empty($allPodcastsText)) {
    $text .= "\n\n___\n\n## Podcasts\n{$allPodcastsText}";
    $briefText .= "Podcasts: {$allPodcastsbriefText}";
}


// Process Laracasts
$laracastsText = '';
$laracasts     = new SimpleXMLElement(file_get_contents('https://laracasts.com/feed'));

foreach ($laracasts->entry as $item) {
    if (strtotime($item->updated) > strtotime($since)) {
        $laracastsText .= "- [{$item->title}]({$item->link['href']})\n";
    }
}

if (! empty($laracastsText)) {
    $text .= "\n\n___\n\n## [Laracasts](https://laracasts.com)\n{$laracastsText}";
    $briefText .= 'Laracasts, ';
}


$larajobsText = '';
$larajobs     = new SimpleXMLElement(file_get_contents('https://larajobs.com/feed'));

foreach ($larajobs->channel->item as $item) {
    if (strtotime($item->pubDate) > strtotime($since)) {
        $larajobsText .= "- [{$item->title}]({$item->link})\n";
    }
}

if (! empty($larajobsText)) {
    $text .= "\n\n___\n\n## [Larajobs](https://larajobs.com)\n{$larajobsText}";
    $briefText .= 'Larajobs';
}

$briefText = trim(str_replace([', ]'], [']'], $briefText), ',');
$text      = "# A week of Laravel #{$number} ({$titleDate})

> **Updates:** \"{$briefText}\"

> **Published:** {$published}

{$text}";

$file = date('Y-m-d').'-a-week-of-laravel';
file_put_contents(date('Y')."/{$file}.md", $text);

echo 'Done!';
